{"version":3,"sources":["components/Conversion/FieldGroup.tsx","components/Conversion/Conversion.tsx","images/icon.webp","components/Navbar/Navbar.tsx","App.tsx","index.tsx"],"names":["FieldGroup","Status","label","value","radix","handleChange","useState","Standby","clipboard","setClipboard","StatusIcons","title","useEffect","className","onChange","event","target","onMouseUp","navigator","writeText","then","Success","catch","Failure","copyToClipboard","fields","Conversion","Array","fill","numeral","setNumeral","updateValues","decimal","parseInt","map","field","toString","toUpperCase","index","Navbar","src","Logo","alt","App","ReactDOM","render","document","getElementById"],"mappings":"sPAuEeA,EAxDqB,SAAC,GAA2C,IAEzEC,EAFgCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,cAAmB,SAExEJ,OAFwE,qBAExEA,IAFwE,qBAExEA,IAFwE,sBAExEA,MAFwE,KAO7E,MAAkCK,mBAAiBL,EAAOM,SAA1D,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAc,CAClB,cAAC,IAAD,CAAkBC,MAAM,sBACxB,cAAC,IAAD,CAAkBA,MAAM,wBACxB,cAAC,IAAD,CAAkBA,MAAM,oBAI1BC,qBAAU,WACRH,EAAaR,EAAOM,WACnB,CAACJ,EAAOF,EAAOM,UAiBlB,OACE,sBAAKM,UAAU,cAAf,UACE,qBAAKA,UAAU,oBAAf,SAAoCX,IACpC,sBAAKW,UAAU,sCAAf,UACE,qBAAKA,UAAU,4BAAf,SACE,uBACEA,UAAU,oBACVV,MAAOA,EACPW,SAAU,SAACC,GAAD,OAAWV,EAAaU,EAAMC,OAAOb,MAAOC,QAG1D,qBACES,UAAU,wBACVI,UAAW,kBAxBK,SAACd,GACvBe,UAAUV,UACPW,UAAUhB,GACViB,MAAK,WACJX,EAAaR,EAAOoB,YAErBC,OAAM,WACLb,EAAaR,EAAOsB,YAiBDC,CAAgBrB,IAFnC,SAIGO,EAAYF,YC3DjBiB,G,MAAS,CACb,CAAEvB,MAAO,UAAWE,MAAO,IAC3B,CAAEF,MAAO,QAASE,MAAO,GACzB,CAAEF,MAAO,cAAeE,MAAO,IAC/B,CAAEF,MAAO,SAAUE,MAAO,KA0CbsB,EAvCc,WAQ3B,MAA8BpB,mBAAmBqB,MAAM,GAAGC,KAAK,MAA/D,mBAAOC,EAAP,KAAgBC,EAAhB,KAOMC,EAAe,SAAC5B,EAAeC,GACnC,IAAM4B,EAAkBC,SAAS9B,EAAOC,IAAU,EAClD0B,EACEL,EAAOS,KAAI,SAACC,GAAD,OAAWH,EAAQI,SAASD,EAAM/B,OAAOiC,mBAIxD,OACE,yBAASxB,UAAU,aAAnB,SACE,qBAAKA,UAAU,sBAAf,SACGY,EAAOS,KAAI,SAACC,EAAOG,GAAR,OACV,cAAC,EAAD,CAEEpC,MAAOiC,EAAMjC,MACbE,MAAO+B,EAAM/B,MACbD,MAAO0B,EAAQS,GACfjC,aAAc0B,GAJTO,WCvCF,MAA0B,kCCe1BC,G,MAXU,WACvB,OACE,qBAAK1B,UAAU,SAAf,SACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,mBAAmB2B,IAAKC,EAAMC,IAAI,iBACjD,qBAAK7B,UAAU,oBAAf,gDCGO8B,G,MAPO,kBACpB,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,SCLJC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.8804aa32.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  HiClipboardCopy as ClipboardStandby,\r\n  HiClipboardCheck as ClipboardSuccess,\r\n} from \"react-icons/hi\";\r\nimport { BiError as ClipboardFailure } from \"react-icons/bi\";\r\n\r\n// defining prop types\r\ninterface Props {\r\n  label: string;\r\n  value: string;\r\n  radix: number;\r\n  handleChange: (value: string, radix: number) => void;\r\n}\r\n\r\nconst FieldGroup: React.FC<Props> = ({ label, value, radix, handleChange }) => {\r\n  // Storing status of clipboard copying\r\n  enum Status {\r\n    Standby, // Haven't copied to clipboard\r\n    Success, // Copied to clipboard successfully\r\n    Failure, // Failed to copy to clipboard\r\n  }\r\n  const [clipboard, setClipboard] = useState<Status>(Status.Standby);\r\n  const StatusIcons = [\r\n    <ClipboardStandby title=\"Copy to Clipboard\" />,\r\n    <ClipboardSuccess title=\"Copied Successfully\" />,\r\n    <ClipboardFailure title=\"Failed to copy\" />,\r\n  ];\r\n\r\n  // Resets clipboard to standby when there is a change in value\r\n  useEffect(() => {\r\n    setClipboard(Status.Standby);\r\n  }, [value, Status.Standby]);\r\n\r\n  /**\r\n   * Copies numeral string to clipboard\r\n   * @param value Numeral string/value\r\n   */\r\n  const copyToClipboard = (value: string): void => {\r\n    navigator.clipboard\r\n      .writeText(value)\r\n      .then(() => {\r\n        setClipboard(Status.Success);\r\n      })\r\n      .catch(() => {\r\n        setClipboard(Status.Failure);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"field-group\">\r\n      <div className=\"field-group-label\">{label}</div>\r\n      <div className=\"field-group-input-clipboard-wrapper\">\r\n        <div className=\"field-group-input-wrapper\">\r\n          <input\r\n            className=\"field-group-input\"\r\n            value={value}\r\n            onChange={(event) => handleChange(event.target.value, radix)}\r\n          />\r\n        </div>\r\n        <div\r\n          className=\"field-group-clipboard\"\r\n          onMouseUp={() => copyToClipboard(value)}\r\n        >\r\n          {StatusIcons[clipboard]}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FieldGroup;\r\n","import React, { useState } from \"react\";\r\nimport FieldGroup from \"./FieldGroup\";\r\nimport \"./styles.css\";\r\n\r\n// Field Group values\r\nconst fields = [\r\n  { label: \"Decimal\", radix: 10 },\r\n  { label: \"Octal\", radix: 8 },\r\n  { label: \"Hexadecimal\", radix: 16 },\r\n  { label: \"Binary\", radix: 2 },\r\n];\r\n\r\nconst Conversion: React.FC = () => {\r\n  /**\r\n   * Numerals\r\n   * 0 - Decimal\r\n   * 1 - Octal\r\n   * 2 - Hexadecimal\r\n   * 3 - Binary\r\n   */\r\n  const [numeral, setNumeral] = useState<string[]>(Array(4).fill(\"0\"));\r\n\r\n  /**\r\n   * Updates numeral values in state\r\n   * @param value Entered numeral value\r\n   * @param radix Base of value\r\n   */\r\n  const updateValues = (value: string, radix: number): void => {\r\n    const decimal: number = parseInt(value, radix) || 0;\r\n    setNumeral(\r\n      fields.map((field) => decimal.toString(field.radix).toUpperCase())\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className=\"conversion\">\r\n      <div className=\"field-group-wrapper\">\r\n        {fields.map((field, index) => (\r\n          <FieldGroup\r\n            key={index}\r\n            label={field.label}\r\n            radix={field.radix}\r\n            value={numeral[index]}\r\n            handleChange={updateValues}\r\n          />\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Conversion;\r\n","export default __webpack_public_path__ + \"static/media/icon.43e7d903.webp\";","import React from \"react\";\r\nimport Logo from \"../../images/icon.webp\";\r\nimport \"./styles.css\";\r\n\r\nconst Navbar: React.FC = () => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"navbar-brand\">\r\n        <img className=\"navbar-brand-img\" src={Logo} alt=\"Website Logo\" />\r\n        <div className=\"navbar-brand-text\">NUMERAL SYSTEMS CONVERSIONS</div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport Conversion from \"./components/Conversion/Conversion\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport \"./styles.css\";\r\n\r\nconst App: React.FC = () => (\r\n  <>\r\n    <Navbar />\r\n    <Conversion />\r\n  </>\r\n);\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}